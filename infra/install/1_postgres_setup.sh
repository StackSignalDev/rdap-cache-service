#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e

# --- Configuration Variables ---
# You can override these by setting environment variables before running the script
# Example: export PG_PASSWORD="your_secure_password" && sudo bash setup_postgres.sh

DB_NAME="${PG_DB:-rdap_cache}"
DB_USER="${PG_USER:-rdap_user}"
# Generate a random password if PG_PASSWORD is not set
DB_PASSWORD="${PG_PASSWORD:-$(openssl rand -base64 16)}"

# --- Script Start ---
echo "Starting PostgreSQL setup for $DB_NAME..."
echo "Database: $DB_NAME"
echo "User:     $DB_USER"
# Only display password if it was generated by the script
if [ "$DB_PASSWORD" == "$(openssl rand -base64 16)" ] && [ -z "$PG_PASSWORD" ]; then
  echo "Password: *** A random password will be generated ***"
else
  echo "Password: *** Using provided \$PG_PASSWORD ***"
fi
echo "-------------------------------------------"
sleep 3 # Give user time to read

# --- 1. Install PostgreSQL ---
echo "Updating package list..."
sudo apt update -y

echo "Installing PostgreSQL and contrib package..."
sudo apt install -y postgresql postgresql-contrib

# Optional: Ensure service is running and enabled (usually handled by installer)
# sudo systemctl enable postgresql
# sudo systemctl start postgresql

# --- 2. Create User and Database ---
echo "Configuring PostgreSQL database and user..."

# Use psql to execute SQL commands as the default 'postgres' superuser
# Use DO block to make user creation idempotent (doesn't fail if user exists)
sudo -u postgres psql -c "DO \$\$ BEGIN IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = '$DB_USER') THEN CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD'; ELSE RAISE NOTICE 'User \"$DB_USER\" already exists, skipping creation.'; END IF; END \$\$;"

# Use DO block to make database creation idempotent
sudo -u postgres psql -c "DO \$\$ BEGIN IF NOT EXISTS (SELECT FROM pg_database WHERE datname = '$DB_NAME') THEN CREATE DATABASE $DB_NAME; ELSE RAISE NOTICE 'Database \"$DB_NAME\" already exists, skipping creation.'; END IF; END \$\$;"

# --- 3. Grant Privileges ---
echo "Granting privileges..."

# Grant connection privileges ON the database TO the user
sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;"

# Grant CREATEDB privilege TO the user (needed for Prisma's shadow database)
sudo -u postgres psql -c "ALTER USER $DB_USER CREATEDB;"

# Grant USAGE and CREATE privileges ON the 'public' schema WITHIN the database
# Note: Must connect to the specific database (-d $DB_NAME) to grant schema permissions
sudo -u postgres psql -d $DB_NAME -c "GRANT USAGE, CREATE ON SCHEMA public TO $DB_USER;"

# --- 4. Output Summary ---
echo "-------------------------------------------"
echo "PostgreSQL setup completed successfully!"
echo ""
echo "Database Name: $DB_NAME"
echo "Username:      $DB_USER"
# Display the password only if it was generated by this script run
if [ "$DB_PASSWORD" == "$(openssl rand -base64 16 | head -c 16)" ] && [ -z "$PG_PASSWORD" ]; then
    echo "Generated Password: $DB_PASSWORD"
    echo "*** Store this password securely! It won't be shown again. ***"
fi
echo ""
echo "You can now use these details in your .env file's DATABASE_URL:"
echo "DATABASE_URL=\"postgresql://$DB_USER:$DB_PASSWORD@localhost:5432/$DB_NAME\""
echo "-------------------------------------------"

exit 0