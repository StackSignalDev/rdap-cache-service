AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Launches EC2 instance for RDAP Cache, installs dependencies, runs setup scripts,
  and assigns an IAM Role allowing S3 backup uploads.

Parameters:
  KeyName:
    Type: String
    Description: 'Name of an existing EC2 KeyPair to enable SSH access to the instance'

  InstanceType:
    Type: String
    Description: 'EC2 instance type'
    Default: t3.nano
    AllowedValues:
      - t2.micro
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium

  AMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: 'The AMI ID to use for the EC2 instance (Latest Ubuntu 22.04 LTS)'
    Default: '/aws/service/canonical/ubuntu/server/22.04/stable/current/amd64/hvm/ebs-gp2/ami-id'

  SecurityGroupStackName:
    Type: String
    Description: 'Name of the CloudFormation stack that created the security group.'
    Default: 'rdap-cache-sg-stack' # Ensure this matches your SG stack name

  S3BackupBucketStackName:
    Type: String
    Description: 'Name of the CloudFormation stack that created the S3 backup bucket.'
    Default: 'rdap-cache-db-backup-bucket-stack' # Ensure this matches your S3 stack name

  AppRepoUrl:
    Type: String
    Description: 'The Git HTTPS URL for the application repository.'
    Default: 'https://github.com/StackSignalDev/rdap-cache-service.git'

Resources:
  # --- IAM Role and Policy for S3 Backup Access ---
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'rdap-cache-instance-role-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: S3BackupBucketWritePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject # Permission needed to upload backups
                Resource:
                  # Grant access ONLY to objects INSIDE the specific backup bucket
                  - !Sub
                    - '${BackupBucketArn}/*' # The /* is crucial for object actions
                    - BackupBucketArn: !ImportValue ${S3BackupBucketStackName}-BackupBucketArn
                # Optional: If you need to list backups later (e.g., for cleanup)
                #           add another statement for s3:ListBucket on the bucket ARN itself.
                # - Effect: Allow
                #   Action:
                #     - s3:ListBucket
                #   Resource:
                #     - !ImportValue ${S3BackupBucketStackName}-BackupBucketArn

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub 'rdap-cache-instance-profile-${AWS::StackName}'
      Path: "/"
      Roles:
        - !Ref EC2InstanceRole
  # --- End IAM Role and Policy ---

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - Fn::ImportValue: !Sub '${SecurityGroupStackName}-SecurityGroupId'
      # --- Attach the Instance Profile ---
      IamInstanceProfile: !Ref EC2InstanceProfile
      # --- End Attach Instance Profile ---
      Tags:
        - Key: Name
          Value: RDAPCacheInstance
      UserData:
        Fn::Base64:
          !Sub
          # --- UserData script content remains the same ---
          - |
            #!/bin/bash -xe
            # Log everything
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

            echo "Starting UserData script..."
            # --- System Update and Git Install ---
            echo "Updating system packages..."
            apt update -y
            echo "Installing git..."
            apt install -y git

            # --- Application User and Directory Setup ---
            echo "Creating application user ${APP_USER}..."
            useradd -m -s /bin/bash ${APP_USER} || echo "User ${APP_USER} already exists"
            echo "Creating application directory ${APP_DIR}..."
            mkdir -p ${APP_DIR}

            echo "Cloning application from ${AppRepoUrl} into ${APP_DIR}..."
            git clone ${AppRepoUrl} ${APP_DIR}

            echo "Setting ownership of ${APP_DIR} to ${APP_USER}..."
            chown -R ${APP_USER}:${APP_USER} ${APP_DIR}

            echo "Changing directory to application root ${APP_DIR}..."
            cd "${APP_DIR}"

            if [ -d "infra/install" ]; then
                find "infra/install" -maxdepth 1 -type f -name '[0-9]*_*.sh' | sort | while IFS= read -r script_path; do
                    if [ -f "$script_path" ]; then
                        echo "--- Running script: $script_path ---"
                        bash "$script_path"
                        echo "--- Finished script: $script_path ---"
                    else
                        echo "Skipping non-file item found by find: $script_path"
                    fi
                done
                echo "Finished executing setup scripts."
            fi

            # --- UserData Finish ---
            echo "UserData script finished."
            # ... (rest of the UserData script and concluding messages) ...
            echo "**********************************************************************"
            echo "***                     SETUP COMPLETE (Review Logs)                 ***"
            echo "**********************************************************************"
            # ...
            echo "**********************************************************************"
          # --- Fn::Sub variable map remains the same ---
          - {
              AppRepoUrl: !Ref AppRepoUrl,
              APP_USER: 'rdapapp',
              APP_DIR: '/srv/rdap-cache-service',
            }

Outputs:
  InstanceId:
    Description: 'The ID of the EC2 instance'
    Value: !Ref EC2Instance
  PublicIp:
    Description: 'The public IP address of the EC2 instance'
    Value: !GetAtt EC2Instance.PublicIp
  # Optional: Output Role/Profile ARNs if needed elsewhere
  InstanceRoleArn:
    Description: 'ARN of the IAM Role created for the EC2 instance'
    Value: !GetAtt EC2InstanceRole.Arn
  InstanceProfileArn:
    Description: 'ARN of the IAM Instance Profile created for the EC2 instance'
    Value: !GetAtt EC2InstanceProfile.Arn